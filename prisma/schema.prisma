generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  username String   @unique
  photoUrl String?
  name     String?
  baskets  Basket[]
  orders   Order[]
  Pizza    Pizza[]
}

model Pizza {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  ingredients PizzaIngredient[]
  public      Boolean           @default(true)
  type        ProductType       @default(NORMAL)
  size        PizzaSize         @default(SMALL)
  pizzaDough  PizzaDough        @default(THIN)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  author      User?             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int?
  BasketItem  BasketItem[]
  OrderItem   OrderItem[]
}

enum PizzaSize {
  SMALL
  MEDIUM
  LARGE
}

enum PizzaDough {
  THIN
  THICK
  STUFFED
}

enum ProductType {
  NORMAL
  CUSTOM
  DRINK
  SNACK
  APPETIZER
}

model Ingredient {
  id       Int               @id @default(autoincrement())
  name     String
  imageUrl String?
  key      String?
  amount   Int               @default(0)
  color    String?
  type     IngredientType    @default(CHEESE)
  pizzas   PizzaIngredient[]
}

enum IngredientType {
  CHEESE
  MEAT
  VEGETABLE
  SAUCE
  SPICE
}

model PizzaIngredient {
  id           Int        @id @default(autoincrement())
  pizza        Pizza?     @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
  pizzaId      Int?
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId Int
}

model Appetizer {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  public      Boolean      @default(true)
  type        ProductType  @default(APPETIZER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  BasketItem  BasketItem[]
  OrderItem   OrderItem[]
}

model Snack {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  public      Boolean      @default(true)
  type        ProductType  @default(SNACK)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  BasketItem  BasketItem[]
  OrderItem   OrderItem[]
}

model Drink {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  public      Boolean      @default(true)
  type        ProductType  @default(DRINK)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  BasketItem  BasketItem[]
  OrderItem   OrderItem[]
}

model Basket {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int          @unique
  items     BasketItem[]
  createdAt DateTime     @default(now())
}

model BasketItem {
  id          Int        @id @default(autoincrement())
  basket      Basket     @relation(fields: [basketId], references: [id], onDelete: Cascade)
  basketId    Int
  pizza       Pizza?     @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
  pizzaId     Int?
  appetizer   Appetizer? @relation(fields: [appetizerId], references: [id], onDelete: Cascade)
  appetizerId Int?
  snack       Snack?     @relation(fields: [snackId], references: [id], onDelete: Cascade)
  snackId     Int?
  drink       Drink?     @relation(fields: [drinkId], references: [id], onDelete: Cascade)
  drinkId     Int?
  quantity    Int        @default(1)

  @@unique([basketId, pizzaId])
  @@unique([basketId, appetizerId])
  @@unique([basketId, snackId])
  @@unique([basketId, drinkId])
}

model Order {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  address     String       @default("")
  paymentType PaymentType  @default(QR)
  delivery    DeliveryType @default(PICKUP)
  phone       String       @default("0000000000")
  items       OrderItem[]
  star        Int          @default(0)
  totalPrice  Decimal
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
}

model OrderItem {
  id          Int        @id @default(autoincrement())
  order       Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int
  pizza       Pizza?     @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
  pizzaId     Int?
  appetizer   Appetizer? @relation(fields: [appetizerId], references: [id], onDelete: Cascade)
  appetizerId Int?
  snack       Snack?     @relation(fields: [snackId], references: [id], onDelete: Cascade)
  snackId     Int?
  drink       Drink?     @relation(fields: [drinkId], references: [id], onDelete: Cascade)
  drinkId     Int?
  quantity    Int        @default(1)
}

enum PaymentType {
  QR
  TRANSFER
  CARD
}

enum DeliveryType {
  PICKUP
  DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}
